// <auto-generated />
using System;
using IssuePilot.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IssuePilot.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210314212544_finalMigration")]
    partial class finalMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:IdentityIncrement", 1)
                .HasAnnotation("SqlServer:IdentitySeed", 1)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IssuePilot.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("TicketId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("IssuePilot.Models.DBModels.EntryCase", b =>
                {
                    b.Property<int>("EntryCaseId")
                        .HasColumnType("int");

                    b.Property<string>("EntryCaseName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntryCaseId");

                    b.ToTable("EntryCase");

                    b.HasData(
                        new
                        {
                            EntryCaseId = 0,
                            EntryCaseName = "UserAdded"
                        },
                        new
                        {
                            EntryCaseId = 1,
                            EntryCaseName = "UserRemoved"
                        },
                        new
                        {
                            EntryCaseId = 2,
                            EntryCaseName = "TicketClosed"
                        },
                        new
                        {
                            EntryCaseId = 3,
                            EntryCaseName = "TicketOpened"
                        },
                        new
                        {
                            EntryCaseId = 4,
                            EntryCaseName = "TicketCanceled"
                        },
                        new
                        {
                            EntryCaseId = 5,
                            EntryCaseName = "TicketPaused"
                        },
                        new
                        {
                            EntryCaseId = 6,
                            EntryCaseName = "TicketInProgress"
                        });
                });

            modelBuilder.Entity("IssuePilot.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("IssuePilot.Models.NewsfeedEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewsText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NewsfeedEntries");
                });

            modelBuilder.Entity("IssuePilot.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DeletedTicketsCount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2021, 3, 14, 22, 25, 43, 53, DateTimeKind.Local).AddTicks(9918),
                            CreatorId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            DeletedTicketsCount = 0,
                            Description = "Ein vom System generiertes Project zum Testen.",
                            Title = "Testprojekt"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2021, 3, 14, 22, 25, 43, 59, DateTimeKind.Local).AddTicks(5406),
                            CreatorId = "B22698B8-42A2-4115-9631-1C2D1E2AC5C5",
                            DeletedTicketsCount = 2,
                            Description = "Ein vom System generiertes zweites Projekt zum Test. Ein vom System generiertes zweites Projekt zum Test.Ein vom System generiertes zweites Projekt zum Test.Ein vom System generiertes zweites Projekt zum Test.Ein vom System generiertes zweites Projekt zum Test.Ein vom System generiertes zweites Projekt zum Test.Ein vom System generiertes zweites Projekt zum Test. Ein vom System generiertes zweites Projekt zum Test.",
                            Title = "Projekt zum Löschen"
                        });
                });

            modelBuilder.Entity("IssuePilot.Models.ProjectMemberEntry", b =>
                {
                    b.Property<int>("FK_ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("FK_ProjectRoleId")
                        .HasColumnType("int");

                    b.Property<string>("FK_UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FK_ProjectId", "FK_ProjectRoleId", "FK_UserId");

                    b.HasIndex("FK_ProjectRoleId");

                    b.HasIndex("FK_UserId");

                    b.ToTable("ProjectMemberEntries");

                    b.HasData(
                        new
                        {
                            FK_ProjectId = 1,
                            FK_ProjectRoleId = 1,
                            FK_UserId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1"
                        },
                        new
                        {
                            FK_ProjectId = 2,
                            FK_ProjectRoleId = 1,
                            FK_UserId = "B22698B8-42A2-4115-9631-1C2D1E2AC5C5"
                        },
                        new
                        {
                            FK_ProjectId = 2,
                            FK_ProjectRoleId = 2,
                            FK_UserId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1"
                        });
                });

            modelBuilder.Entity("IssuePilot.Models.ProjectRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProjectRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Eigentümer/in"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Teilnehmer/in"
                        });
                });

            modelBuilder.Entity("IssuePilot.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClosedFromUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("TicketCreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClosedFromUserId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TicketCreatorId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2021, 3, 14, 22, 25, 43, 61, DateTimeKind.Local).AddTicks(9572),
                            Description = "Ein vom System generiertes Ticket zum Testen.",
                            ProjectId = 1,
                            StatusId = 1,
                            TicketCreatorId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            Title = "TestTicket",
                            Weight = 1
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2021, 3, 14, 22, 25, 43, 62, DateTimeKind.Local).AddTicks(1752),
                            Description = "Ein vom System generiertes Ticket zum Testen. Ein vom System generiertes Ticket zum Testen. Ein vom System generiertes Ticket zum Testen. Ein vom System generiertes Ticket zum Testen. Ein vom System generiertes Ticket zum Testen. Ein vom System generiertes Ticket zum Testen. Ein vom System generiertes Ticket zum Testen. Ein vom System generiertes Ticket zum Testen. Ein vom System generiertes Ticket zum Testen. Ein vom System generiertes Ticket zum Testen. Ein vom System generiertes Ticket zum Testen.",
                            ProjectId = 1,
                            StatusId = 3,
                            TicketCreatorId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            Title = "TestTicket 2",
                            Weight = 2
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2021, 3, 14, 22, 25, 43, 62, DateTimeKind.Local).AddTicks(1809),
                            Description = "Ein vom System generiertes Ticket zum Testen.",
                            ProjectId = 1,
                            StatusId = 2,
                            TicketCreatorId = "B22698B8-42A2-4115-9631-1C2D1E2AC5C5",
                            Title = "TestTicket 3",
                            Weight = 3
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2021, 3, 14, 22, 25, 43, 62, DateTimeKind.Local).AddTicks(1818),
                            Description = "Ein vom System generiertes Ticket zum Testen.",
                            ProjectId = 1,
                            StatusId = 4,
                            TicketCreatorId = "B22698B8-42A2-4115-9631-1C2D1E2AC5C5",
                            Title = "TestTicket 4",
                            Weight = 2
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2021, 3, 14, 22, 25, 43, 62, DateTimeKind.Local).AddTicks(1824),
                            Description = "Ein vom System generiertes Ticket zum Testen.",
                            ProjectId = 1,
                            StatusId = 1,
                            TicketCreatorId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            Title = "TestTicket 5",
                            Weight = 0
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2021, 3, 14, 22, 25, 43, 62, DateTimeKind.Local).AddTicks(1831),
                            Description = "Ein vom System generiertes Ticket zum Testen.",
                            ProjectId = 1,
                            StatusId = 1,
                            TicketCreatorId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            Title = "TestTicket 6",
                            Weight = 1
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2021, 3, 14, 22, 25, 43, 62, DateTimeKind.Local).AddTicks(1837),
                            Description = "Ein vom System generiertes Ticket zum Testen.",
                            ProjectId = 1,
                            StatusId = 1,
                            TicketCreatorId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            Title = "TestTicket 7",
                            Weight = 1
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2021, 3, 14, 22, 25, 43, 62, DateTimeKind.Local).AddTicks(1844),
                            Description = "Ein vom System generiertes Ticket zum Testen.",
                            ProjectId = 1,
                            StatusId = 1,
                            TicketCreatorId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            Title = "TestTicket 8",
                            Weight = 1
                        },
                        new
                        {
                            Id = 9,
                            CreateDate = new DateTime(2021, 3, 14, 22, 25, 43, 62, DateTimeKind.Local).AddTicks(1850),
                            Description = "Ein vom System generiertes Ticket zum Testen.",
                            ProjectId = 1,
                            StatusId = 1,
                            TicketCreatorId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            Title = "TestTicket 9",
                            Weight = 1
                        },
                        new
                        {
                            Id = 10,
                            CreateDate = new DateTime(2021, 3, 14, 22, 25, 43, 62, DateTimeKind.Local).AddTicks(1856),
                            Description = "Ein vom System generiertes Ticket zum Testen.",
                            ProjectId = 1,
                            StatusId = 1,
                            TicketCreatorId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            Title = "TestTicket 10",
                            Weight = 1
                        },
                        new
                        {
                            Id = 11,
                            CreateDate = new DateTime(2021, 3, 14, 22, 25, 43, 62, DateTimeKind.Local).AddTicks(1862),
                            Description = "Ein vom System generiertes Ticket zum Testen.",
                            ProjectId = 1,
                            StatusId = 1,
                            TicketCreatorId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            Title = "TestTicket 11",
                            Weight = 1
                        });
                });

            modelBuilder.Entity("IssuePilot.Models.TicketCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("TicketCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bug",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Frage",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dokumentation",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Diskussion",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Feature",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "Bug",
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 7,
                            Name = "Frage",
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 8,
                            Name = "Dokumentation",
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 9,
                            Name = "Diskussion",
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 10,
                            Name = "Feature",
                            ProjectId = 2
                        });
                });

            modelBuilder.Entity("IssuePilot.Models.TicketHistoryEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntryCaseId")
                        .HasColumnType("int");

                    b.Property<string>("EntryCreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EntryCaseId");

                    b.HasIndex("EntryCreatorId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketHistoryEntries");
                });

            modelBuilder.Entity("IssuePilot.Models.TicketProjectCategory", b =>
                {
                    b.Property<int>("FK_TicketId")
                        .HasColumnType("int");

                    b.Property<int>("FK_TicketCategoryId")
                        .HasColumnType("int");

                    b.HasKey("FK_TicketId", "FK_TicketCategoryId");

                    b.HasIndex("FK_TicketCategoryId");

                    b.ToTable("TicketProjectCategories");

                    b.HasData(
                        new
                        {
                            FK_TicketId = 1,
                            FK_TicketCategoryId = 2
                        },
                        new
                        {
                            FK_TicketId = 2,
                            FK_TicketCategoryId = 2
                        },
                        new
                        {
                            FK_TicketId = 2,
                            FK_TicketCategoryId = 1
                        },
                        new
                        {
                            FK_TicketId = 3,
                            FK_TicketCategoryId = 2
                        },
                        new
                        {
                            FK_TicketId = 4,
                            FK_TicketCategoryId = 3
                        },
                        new
                        {
                            FK_TicketId = 5,
                            FK_TicketCategoryId = 4
                        });
                });

            modelBuilder.Entity("IssuePilot.Models.TicketStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TicketStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Offen"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Abgeschlossen"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Abgebrochen"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Pausiert"
                        },
                        new
                        {
                            Id = 5,
                            Name = "In Bearbeitung"
                        });
                });

            modelBuilder.Entity("IssuePilot.Models.TicketWorker", b =>
                {
                    b.Property<int>("FK_TicketId")
                        .HasColumnType("int");

                    b.Property<string>("FK_UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FK_TicketId", "FK_UserId");

                    b.HasIndex("FK_UserId");

                    b.ToTable("TicketWorkers");
                });

            modelBuilder.Entity("IssuePilot.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "B22698B8-42A2-4115-9631-1C2D1E2AC5F7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "450d20cf-5e43-4482-9a97-a558dcb23fc8",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Admin@Admin.com",
                            EmailConfirmed = true,
                            Firstname = "admin",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEBZGENkNWVF/4ujpbrfVXLVomPrrxMpMiQ17qu+PEB2n5ptgnMFhFGGAXpsIY0Lu+w==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c7bf37f5-c5fa-424e-a4ae-61810fb0baf9",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = true,
                            Firstname = "manager",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "MANAGER",
                            PasswordHash = "AQAAAAEAACcQAAAAELMNxbjFAizx8engdvPllq2h7k1RPeiGFXNrIi9FOatRfn53dfm/E8mmyK2ZNTXhsw==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Manager"
                        },
                        new
                        {
                            Id = "e28b8357-2955-4f3c-9c3d-1ec6ab1f4335",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f24f0a28-caa6-464a-a02f-10648053935d",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = true,
                            Firstname = "benutzer",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "BENUTZER",
                            PasswordHash = "AQAAAAEAACcQAAAAEM2pDaNkVOolmr65qKKIPnQwJBr5MlhqdgxLNebs/5AmubSQAYZIeQD6xgsYdAmaeQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Benutzer"
                        },
                        new
                        {
                            Id = "B22698B8-42A2-4115-9631-1C2D1E2AC5C5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f2c9fb8-5963-4bf1-89b2-d3077902ec4f",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "demoadmin@Admin.com",
                            EmailConfirmed = false,
                            Firstname = "demo",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMOADMIN@ADMIN.COM",
                            NormalizedUserName = "DEMOADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEAbhyzhBcWsV4GWLPdFD0pr53a9CWacGaqtTkPp4sHaKudBNQ7CxoCzEmH05Snz/ug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            Surname = "admin",
                            TwoFactorEnabled = false,
                            UserName = "DemoAdmin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "2301D884-221A-4E7D-B509-0113DCC043E1",
                            ConcurrencyStamp = "1372154d-db7b-4501-ba8c-496004da3cba",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "7D9B7113-A8F8-4035-99A7-A20DD400F6A3",
                            ConcurrencyStamp = "98e5d257-4bb4-4410-8c70-4a2230222402",
                            Name = "Projektmanager",
                            NormalizedName = "PROJEKTMANAGER"
                        },
                        new
                        {
                            Id = "78A7570F-3CE5-48BA-9461-80283ED1D94D",
                            ConcurrencyStamp = "25d1c5e0-4c0d-42bb-ba04-f2c72e04847e",
                            Name = "Benutzer",
                            NormalizedName = "BENUTZER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "B22698B8-42A2-4115-9631-1C2D1E2AC5F7",
                            RoleId = "2301D884-221A-4E7D-B509-0113DCC043E1"
                        },
                        new
                        {
                            UserId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            RoleId = "7D9B7113-A8F8-4035-99A7-A20DD400F6A3"
                        },
                        new
                        {
                            UserId = "e28b8357-2955-4f3c-9c3d-1ec6ab1f4335",
                            RoleId = "78A7570F-3CE5-48BA-9461-80283ED1D94D"
                        },
                        new
                        {
                            UserId = "B22698B8-42A2-4115-9631-1C2D1E2AC5C5",
                            RoleId = "2301D884-221A-4E7D-B509-0113DCC043E1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("IssuePilot.Models.Comment", b =>
                {
                    b.HasOne("IssuePilot.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("IssuePilot.Models.Ticket", "Ticket")
                        .WithMany("Comments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IssuePilot.Models.Image", b =>
                {
                    b.HasOne("IssuePilot.Models.Ticket", "Ticket")
                        .WithMany("Images")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IssuePilot.Models.NewsfeedEntry", b =>
                {
                    b.HasOne("IssuePilot.Models.User", "User")
                        .WithMany("NewsfeedEntries")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IssuePilot.Models.Project", b =>
                {
                    b.HasOne("IssuePilot.Models.User", "Creator")
                        .WithMany("Projects")
                        .HasForeignKey("CreatorId");
                });

            modelBuilder.Entity("IssuePilot.Models.ProjectMemberEntry", b =>
                {
                    b.HasOne("IssuePilot.Models.Project", "Project")
                        .WithMany("ProjectMemberEntries")
                        .HasForeignKey("FK_ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IssuePilot.Models.ProjectRole", "ProjectRole")
                        .WithMany("ProjectMemberEntries")
                        .HasForeignKey("FK_ProjectRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IssuePilot.Models.User", "User")
                        .WithMany("ProjectMemberEntries")
                        .HasForeignKey("FK_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IssuePilot.Models.Ticket", b =>
                {
                    b.HasOne("IssuePilot.Models.User", "ClosedFromUser")
                        .WithMany()
                        .HasForeignKey("ClosedFromUserId");

                    b.HasOne("IssuePilot.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("IssuePilot.Models.TicketStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IssuePilot.Models.User", "TicketCreator")
                        .WithMany("CreatedTickets")
                        .HasForeignKey("TicketCreatorId");
                });

            modelBuilder.Entity("IssuePilot.Models.TicketCategory", b =>
                {
                    b.HasOne("IssuePilot.Models.Project", "Project")
                        .WithMany("TicketCategories")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IssuePilot.Models.TicketHistoryEntry", b =>
                {
                    b.HasOne("IssuePilot.Models.DBModels.EntryCase", "EntryCase")
                        .WithMany("TicketHistoryEntries")
                        .HasForeignKey("EntryCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IssuePilot.Models.User", "EntryCreator")
                        .WithMany()
                        .HasForeignKey("EntryCreatorId");

                    b.HasOne("IssuePilot.Models.Ticket", "Ticket")
                        .WithMany("TicketHistoryEntries")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IssuePilot.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IssuePilot.Models.TicketProjectCategory", b =>
                {
                    b.HasOne("IssuePilot.Models.TicketCategory", "TicketCategory")
                        .WithMany("TicketProjectCategories")
                        .HasForeignKey("FK_TicketCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IssuePilot.Models.Ticket", "Ticket")
                        .WithMany("TicketProjectCategories")
                        .HasForeignKey("FK_TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IssuePilot.Models.TicketWorker", b =>
                {
                    b.HasOne("IssuePilot.Models.Ticket", "Ticket")
                        .WithMany("TicketWorkers")
                        .HasForeignKey("FK_TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IssuePilot.Models.User", "User")
                        .WithMany("TicketWorkers")
                        .HasForeignKey("FK_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IssuePilot.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IssuePilot.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IssuePilot.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IssuePilot.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
